<file>
	<tokens>
		<keyword>class</keyword>
		<identifier>Ball</identifier>
		<symbol>{</symbol>
		<keyword>field</keyword>
		<keyword>int</keyword>
		<identifier>x</identifier>
		<symbol>;</symbol>
		<keyword>field</keyword>
		<keyword>int</keyword>
		<identifier>y</identifier>
		<symbol>;</symbol>
		<keyword>constructor</keyword>
		<identifier>Ball</identifier>
		<symbol>(</symbol>
		<keyword>int</keyword>
		<identifier>_x</identifier>
		<symbol>,</symbol>
		<keyword>int</keyword>
		<identifier>_y</identifier>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<keyword>let</keyword>
		<identifier>x</identifier>
		<symbol>=</symbol>
		<identifier>_x</identifier>
		<symbol>;</symbol>
		<keyword>let</keyword>
		<identifier>y</identifier>
		<symbol>=</symbol>
		<identifier>_y</identifier>
		<symbol>;</symbol>
		<keyword>return</keyword>
		<keyword>this</keyword>
		<symbol>;</symbol>
		<symbol>}</symbol>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>draw</identifier>
		<symbol>(</symbol>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<keyword>do</keyword>
		<identifier>Screen</identifier>
		<symbol>.</symbol>
		<identifier>setColor</identifier>
		<symbol>(</symbol>
		<keyword>true</keyword>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>do</keyword>
		<identifier>Screen</identifier>
		<symbol>.</symbol>
		<identifier>drawCircle</identifier>
		<symbol>(</symbol>
		<identifier>x</identifier>
		<symbol>,</symbol>
		<identifier>y</identifier>
		<symbol>,</symbol>
		<integerConstants>4</integerConstants>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>return</keyword>
		<symbol>;</symbol>
		<symbol>}</symbol>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>erase</identifier>
		<symbol>(</symbol>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<keyword>do</keyword>
		<identifier>Screen</identifier>
		<symbol>.</symbol>
		<identifier>setColor</identifier>
		<symbol>(</symbol>
		<keyword>false</keyword>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>do</keyword>
		<identifier>Screen</identifier>
		<symbol>.</symbol>
		<identifier>drawCircle</identifier>
		<symbol>(</symbol>
		<identifier>x</identifier>
		<symbol>,</symbol>
		<identifier>y</identifier>
		<symbol>,</symbol>
		<integerConstants>4</integerConstants>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>return</keyword>
		<symbol>;</symbol>
		<symbol>}</symbol>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>pitch</identifier>
		<symbol>(</symbol>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<keyword>if</keyword>
		<symbol>(</symbol>
		<identifier>y</identifier>
		<symbol>&lt;</symbol>
		<integerConstants>248</integerConstants>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<keyword>return</keyword>
		<symbol>;</symbol>
		<symbol>}</symbol>
		<keyword>do</keyword>
		<identifier>erase</identifier>
		<symbol>(</symbol>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>let</keyword>
		<identifier>y</identifier>
		<symbol>=</symbol>
		<identifier>y</identifier>
		<symbol>+</symbol>
		<integerConstants>5</integerConstants>
		<symbol>;</symbol>
		<keyword>do</keyword>
		<identifier>draw</identifier>
		<symbol>(</symbol>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>return</keyword>
		<symbol>;</symbol>
		<symbol>}</symbol>
		<keyword>method</keyword>
		<keyword>int</keyword>
		<identifier>distance</identifier>
		<symbol>(</symbol>
		<keyword>int</keyword>
		<identifier>batX</identifier>
		<symbol>,</symbol>
		<keyword>int</keyword>
		<identifier>batY</identifier>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<keyword>var</keyword>
		<keyword>int</keyword>
		<identifier>xDistance</identifier>
		<symbol>;</symbol>
		<keyword>var</keyword>
		<keyword>int</keyword>
		<identifier>yDistance</identifier>
		<symbol>;</symbol>
		<keyword>var</keyword>
		<keyword>int</keyword>
		<identifier>dist</identifier>
		<symbol>;</symbol>
		<keyword>let</keyword>
		<identifier>xDistance</identifier>
		<symbol>=</symbol>
		<identifier>Math</identifier>
		<symbol>.</symbol>
		<identifier>multiply</identifier>
		<symbol>(</symbol>
		<identifier>x</identifier>
		<symbol>-</symbol>
		<identifier>batX</identifier>
		<symbol>,</symbol>
		<identifier>x</identifier>
		<symbol>-</symbol>
		<identifier>batX</identifier>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>let</keyword>
		<identifier>yDistance</identifier>
		<symbol>=</symbol>
		<identifier>Math</identifier>
		<symbol>.</symbol>
		<identifier>multiply</identifier>
		<symbol>(</symbol>
		<identifier>y</identifier>
		<symbol>-</symbol>
		<identifier>batY</identifier>
		<symbol>,</symbol>
		<identifier>y</identifier>
		<symbol>-</symbol>
		<identifier>batY</identifier>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>let</keyword>
		<identifier>dist</identifier>
		<symbol>=</symbol>
		<identifier>Math</identifier>
		<symbol>.</symbol>
		<identifier>sqrt</identifier>
		<symbol>(</symbol>
		<identifier>xDistance</identifier>
		<symbol>+</symbol>
		<identifier>yDistance</identifier>
		<symbol>)</symbol>
		<symbol>;</symbol>
		<keyword>return</keyword>
		<identifier>dist</identifier>
		<symbol>;</symbol>
		<symbol>}</symbol>
		<keyword>method</keyword>
		<keyword>boolean</keyword>
		<identifier>contact</identifier>
		<symbol>(</symbol>
		<identifier>Bat</identifier>
		<identifier>bat</identifier>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<keyword>if</keyword>
		<symbol>(</symbol>
		<identifier>distance</identifier>
		<symbol>(</symbol>
		<identifier>bat</identifier>
		<symbol>.</symbol>
		<identifier>getX</identifier>
		<symbol>(</symbol>
		<symbol>)</symbol>
		<symbol>,</symbol>
		<identifier>bat</identifier>
		<symbol>.</symbol>
		<identifier>getY</identifier>
		<symbol>(</symbol>
		<symbol>)</symbol>
		<symbol>)</symbol>
		<symbol>&lt;</symbol>
		<integerConstants>10</integerConstants>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<keyword>return</keyword>
		<keyword>true</keyword>
		<symbol>;</symbol>
		<symbol>}</symbol>
		<keyword>return</keyword>
		<keyword>false</keyword>
		<symbol>;</symbol>
		<symbol>}</symbol>
		<symbol>}</symbol>
	</tokens>
	<class>
		<keyword>class</keyword>
		<identifier>Ball</identifier>
		<symbol>{</symbol>
		<ClassVarDec>
			<keyword>field</keyword>
			<keyword>int</keyword>
			<identifier>x</identifier>
			<symbol>;</symbol>
			<keyword>field</keyword>
			<keyword>int</keyword>
			<identifier>y</identifier>
			<symbol>;</symbol>
		</ClassVarDec>
		<subroutineDec>
			<keyword>constructor</keyword>
			<identifier>Ball</identifier>
			<symbol>(</symbol>
			<parameterList>
				<keyword>int</keyword>
				<identifier>_x</identifier>
				<symbol>,</symbol>
				<keyword>int</keyword>
				<identifier>_y</identifier>
			</parameterList>
			<symbol>)</symbol>
			<subroutineBody>
				<symbol>{</symbol>
				<varDec>
				</varDec>
				<statements>
					<letStatement>
						<keyword>let</keyword>
						<identifier>x</identifier>
						<symbol>=</symbol>
						<identifier>_x</identifier>
						<symbol>;</symbol>
					</letStatement>
					<letStatement>
						<keyword>let</keyword>
						<identifier>y</identifier>
						<symbol>=</symbol>
						<identifier>_y</identifier>
						<symbol>;</symbol>
					</letStatement>
					<returnStatement>
						<keyword>return</keyword>
						<keyword>this</keyword>
						<symbol>;</symbol>
					</returnStatement>
				</statements>
				<symbol>}</symbol>
			</subroutineBody>
			<keyword>method</keyword>
			<keyword>void</keyword>
			<identifier>draw</identifier>
			<symbol>(</symbol>
			<parameterList>
			</parameterList>
			<symbol>)</symbol>
			<subroutineBody>
				<symbol>{</symbol>
				<varDec>
				</varDec>
				<statements>
					<keyword>do</keyword>
					<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<keyword>true</keyword>
					<symbol>)</symbol>
					<symbol>;</symbol>
					<keyword>do</keyword>
					<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawCircle</identifier>
					<symbol>(</symbol>
					<identifier>x</identifier>
					<symbol>,</symbol>
					<identifier>y</identifier>
					<symbol>,</symbol>
					<integerConstants>4</integerConstants>
					<symbol>)</symbol>
					<symbol>;</symbol>
					<returnStatement>
						<keyword>return</keyword>
						<symbol>;</symbol>
					</returnStatement>
				</statements>
				<symbol>}</symbol>
			</subroutineBody>
			<keyword>method</keyword>
			<keyword>void</keyword>
			<identifier>erase</identifier>
			<symbol>(</symbol>
			<parameterList>
			</parameterList>
			<symbol>)</symbol>
			<subroutineBody>
				<symbol>{</symbol>
				<varDec>
				</varDec>
				<statements>
					<keyword>do</keyword>
					<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<keyword>false</keyword>
					<symbol>)</symbol>
					<symbol>;</symbol>
					<keyword>do</keyword>
					<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawCircle</identifier>
					<symbol>(</symbol>
					<identifier>x</identifier>
					<symbol>,</symbol>
					<identifier>y</identifier>
					<symbol>,</symbol>
					<integerConstants>4</integerConstants>
					<symbol>)</symbol>
					<symbol>;</symbol>
					<returnStatement>
						<keyword>return</keyword>
						<symbol>;</symbol>
					</returnStatement>
				</statements>
				<symbol>}</symbol>
			</subroutineBody>
			<keyword>method</keyword>
			<keyword>void</keyword>
			<identifier>pitch</identifier>
			<symbol>(</symbol>
			<parameterList>
			</parameterList>
			<symbol>)</symbol>
			<subroutineBody>
				<symbol>{</symbol>
				<varDec>
				</varDec>
				<statements>
					<ifStatement>
						<keyword>if</keyword>
						<symbol>(</symbol>
						<identifier>y</identifier>
						<symbol>&lt;</symbol>
						<integerConstants>248</integerConstants>
						<symbol>)</symbol>
						<symbol>{</symbol>
						<statements>
							<returnStatement>
								<keyword>return</keyword>
								<symbol>;</symbol>
							</returnStatement>
						</statements>
						<symbol>}</symbol>
					</ifStatement>
					<keyword>do</keyword>
					<identifier>erase</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
					<symbol>;</symbol>
					<letStatement>
						<keyword>let</keyword>
						<identifier>y</identifier>
						<symbol>=</symbol>
						<identifier>y</identifier>
						<symbol>+</symbol>
						<integerConstants>5</integerConstants>
						<symbol>;</symbol>
					</letStatement>
					<keyword>do</keyword>
					<identifier>draw</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
					<symbol>;</symbol>
					<returnStatement>
						<keyword>return</keyword>
						<symbol>;</symbol>
					</returnStatement>
				</statements>
				<symbol>}</symbol>
			</subroutineBody>
			<keyword>method</keyword>
			<keyword>int</keyword>
			<identifier>distance</identifier>
			<symbol>(</symbol>
			<parameterList>
				<keyword>int</keyword>
				<identifier>batX</identifier>
				<symbol>,</symbol>
				<keyword>int</keyword>
				<identifier>batY</identifier>
			</parameterList>
			<symbol>)</symbol>
			<subroutineBody>
				<symbol>{</symbol>
				<varDec>
					<keyword>var</keyword>
					<keyword>int</keyword>
					<identifier>xDistance</identifier>
					<symbol>;</symbol>
					<keyword>var</keyword>
					<keyword>int</keyword>
					<identifier>yDistance</identifier>
					<symbol>;</symbol>
					<keyword>var</keyword>
					<keyword>int</keyword>
					<identifier>dist</identifier>
					<symbol>;</symbol>
				</varDec>
				<statements>
					<letStatement>
						<keyword>let</keyword>
						<identifier>xDistance</identifier>
						<symbol>=</symbol>
						<identifier>Math</identifier>
						<symbol>.</symbol>
						<identifier>multiply</identifier>
						<symbol>(</symbol>
						<identifier>x</identifier>
						<symbol>-</symbol>
						<identifier>batX</identifier>
						<symbol>,</symbol>
						<identifier>x</identifier>
						<symbol>-</symbol>
						<identifier>batX</identifier>
						<symbol>)</symbol>
						<symbol>;</symbol>
					</letStatement>
					<letStatement>
						<keyword>let</keyword>
						<identifier>yDistance</identifier>
						<symbol>=</symbol>
						<identifier>Math</identifier>
						<symbol>.</symbol>
						<identifier>multiply</identifier>
						<symbol>(</symbol>
						<identifier>y</identifier>
						<symbol>-</symbol>
						<identifier>batY</identifier>
						<symbol>,</symbol>
						<identifier>y</identifier>
						<symbol>-</symbol>
						<identifier>batY</identifier>
						<symbol>)</symbol>
						<symbol>;</symbol>
					</letStatement>
					<letStatement>
						<keyword>let</keyword>
						<identifier>dist</identifier>
						<symbol>=</symbol>
						<identifier>Math</identifier>
						<symbol>.</symbol>
						<identifier>sqrt</identifier>
						<symbol>(</symbol>
						<identifier>xDistance</identifier>
						<symbol>+</symbol>
						<identifier>yDistance</identifier>
						<symbol>)</symbol>
						<symbol>;</symbol>
					</letStatement>
					<returnStatement>
						<keyword>return</keyword>
						<identifier>dist</identifier>
						<symbol>;</symbol>
					</returnStatement>
				</statements>
				<symbol>}</symbol>
			</subroutineBody>
			<keyword>method</keyword>
			<keyword>boolean</keyword>
			<identifier>contact</identifier>
			<symbol>(</symbol>
			<parameterList>
			</parameterList>
			<subroutineBody>
				<varDec>
				</varDec>
				<statements>
				</statements>
			</subroutineBody>
		</subroutineDec>
	</class>
</file>