function Main.main 1
push constant 8001
push constant 16
push constant 1
neg
call Main.fillMemory 3
pop temp 0
push constant 8000
call Memory.peek 1
pop local 0
push local 0
call Main.convert 1
pop temp 0
push constant 0
return
function Main.convert 3
push constant 1
neg
pop local 2
label WhileTrue.70
push local 2
not
if-goto endWhile.70
push local 1
push constant 1
add
pop local 1
push local 0
call Main.nextMask 1
pop local 0
push local 1
push constant 16
gt
not
not
if-goto ifFalse.92
push argument 0
push local 0
and
push constant 0
eq
not
not
if-goto ifFalse.102
push constant 8000
push local 1
add
push constant 1
call Memory.poke 2
pop temp 0
goto endIf.102
label ifFalse.102
push constant 8000
push local 1
add
push constant 0
call Memory.poke 2
pop temp 0
label endIf.102
goto endIf.92
label ifFalse.92
push constant 0
pop local 2
label endIf.92
goto WhileTrue.70
label endWhile.70
push constant 0
return
function Main.nextMask 0
push argument 0
push constant 0
eq
not
if-goto ifFalse.165
push constant 1
return
goto endIf.165
label ifFalse.165
push argument 0
push constant 2
call Math.multiply 2
return
label endIf.165
function Main.fillMemory 0
label WhileTrue.199
push argument 1
push constant 0
gt
not
if-goto endWhile.199
push argument 0
push argument 2
call Memory.poke 2
pop temp 0
push argument 1
push constant 1
sub
pop argument 1
push argument 0
push constant 1
add
pop argument 0
goto WhileTrue.199
label endWhile.199
push constant 0
return


//class symbol table


//method's symbol table
//name: value
//type: int
//kind: var
//number: 0


//method's symbol table
//name: value
//type: int
//kind: argument
//number: 0
//name: mask
//type: int
//kind: var
//number: 0
//name: position
//type: int
//kind: var
//number: 1
//name: loop
//type: boolean
//kind: var
//number: 2


//method's symbol table
//name: mask
//type: int
//kind: argument
//number: 0


//method's symbol table
//name: startAddress
//type: int
//kind: argument
//number: 0
//name: length
//type: int
//kind: argument
//number: 1
//name: value
//type: int
//kind: argument
//number: 2


