<class>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
	<subroutineDec>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> main </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<identifier> Player </identifier>
				<identifier> player </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<identifier> Ball </identifier>
				<identifier> ball </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<identifier> Bat </identifier>
				<identifier> bat </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<identifier> Vertex </identifier>
				<identifier> vertexLeft </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<identifier> Vertex </identifier>
				<identifier> vertexRight </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<identifier> String </identifier>
				<identifier> end </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> boolean </keyword>
				<identifier> flag </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> i </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> flag </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<keyword> true </keyword>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> end </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<stringConstant> Game Over! </stringConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> player </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Player </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 0 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> i </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<integerConstant> 0 </integerConstant>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> ball </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Ball </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 255 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 100 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<keyword> true </keyword>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> vertexLeft </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Vertex </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 200 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 163 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> vertexRight </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Vertex </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 310 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 163 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> bat </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> Bat </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 240 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 226 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Random </identifier>
					<symbol> . </symbol>
					<identifier> init </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 777 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					<symbol> . </symbol>
					<identifier> draw </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> moveCursor </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<integerConstant> 22 </integerConstant>
							</term>
						</expression>
						<symbol> , </symbol>
						<expression>
							<term>
								<integerConstant> 7 </integerConstant>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> Output </identifier>
					<symbol> . </symbol>
					<identifier> printInt </identifier>
					<symbol> ( </symbol>
					<expressionList>
						<expression>
							<term>
								<identifier> player </identifier>
								<symbol> . </symbol>
								<identifier> getNumHits </identifier>
								<symbol> ( </symbol>
								<expressionList>
								</expressionList>
								<symbol> ) </symbol>
							</term>
						</expression>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> bat </identifier>
					<symbol> . </symbol>
					<identifier> drawVertical </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<whileStatement>
					<keyword> while </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<identifier> flag </identifier>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<ifStatement>
							<keyword> if </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> ball </identifier>
									<symbol> . </symbol>
									<identifier> getStillPitching </identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
								<symbol> = </symbol>
								<term>
									<keyword> false </keyword>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<letStatement>
									<keyword> let </keyword>
									<identifier> i </identifier>
									<symbol> = </symbol>
									<expression>
										<term>
											<identifier> Random </identifier>
											<symbol> . </symbol>
											<identifier> nextInt </identifier>
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
									</expression>
									<symbol> ; </symbol>
								</letStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> ball </identifier>
									<symbol> . </symbol>
									<identifier> setStillPitching </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<keyword> true </keyword>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
							</statements>
							<symbol> } </symbol>
						</ifStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier> Output </identifier>
							<symbol> . </symbol>
							<identifier> moveCursor </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<integerConstant> 8 </integerConstant>
									</term>
								</expression>
								<symbol> , </symbol>
								<expression>
									<term>
										<integerConstant> 7 </integerConstant>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<doStatement>
							<keyword> do </keyword>
							<identifier> Output </identifier>
							<symbol> . </symbol>
							<identifier> printInt </identifier>
							<symbol> ( </symbol>
							<expressionList>
								<expression>
									<term>
										<identifier> i </identifier>
									</term>
								</expression>
							</expressionList>
							<symbol> ) </symbol>
							<symbol> ; </symbol>
						</doStatement>
						<whileStatement>
							<keyword> while </keyword>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> ball </identifier>
									<symbol> . </symbol>
									<identifier> getStillPitching </identifier>
									<symbol> ( </symbol>
									<expressionList>
									</expressionList>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ) </symbol>
							<symbol> { </symbol>
							<statements>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> Keyboard </identifier>
											<symbol> . </symbol>
											<identifier> keyPressed </identifier>
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
										<symbol> = </symbol>
										<term>
											<integerConstant> 32 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<doStatement>
											<keyword> do </keyword>
											<identifier> ball </identifier>
											<symbol> . </symbol>
											<identifier> setStillPitching </identifier>
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<keyword> false </keyword>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<ifStatement>
											<keyword> if </keyword>
											<symbol> ( </symbol>
											<expression>
												<term>
													<symbol> ~ </symbol>
													<term>
														<identifier> bat </identifier>
														<symbol> . </symbol>
														<identifier> getIsHorizontal </identifier>
														<symbol> ( </symbol>
														<expressionList>
														</expressionList>
														<symbol> ) </symbol>
													</term>
												</term>
											</expression>
											<symbol> ) </symbol>
											<symbol> { </symbol>
											<statements>
												<doStatement>
													<keyword> do </keyword>
													<identifier> bat </identifier>
													<symbol> . </symbol>
													<identifier> eraseVertical </identifier>
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
													<symbol> ; </symbol>
												</doStatement>
												<doStatement>
													<keyword> do </keyword>
													<identifier> bat </identifier>
													<symbol> . </symbol>
													<identifier> drawHorizontal </identifier>
													<symbol> ( </symbol>
													<expressionList>
													</expressionList>
													<symbol> ) </symbol>
													<symbol> ; </symbol>
												</doStatement>
												<ifStatement>
													<keyword> if </keyword>
													<symbol> ( </symbol>
													<expression>
														<term>
															<identifier> ball </identifier>
															<symbol> . </symbol>
															<identifier> contact </identifier>
															<symbol> ( </symbol>
															<expressionList>
																<expression>
																	<term>
																		<identifier> bat </identifier>
																	</term>
																</expression>
															</expressionList>
															<symbol> ) </symbol>
														</term>
													</expression>
													<symbol> ) </symbol>
													<symbol> { </symbol>
													<statements>
														<doStatement>
															<keyword> do </keyword>
															<identifier> bat </identifier>
															<symbol> . </symbol>
															<identifier> drawHorizontal </identifier>
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> player </identifier>
															<symbol> . </symbol>
															<identifier> increaseNumHits </identifier>
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> Output </identifier>
															<symbol> . </symbol>
															<identifier> moveCursor </identifier>
															<symbol> ( </symbol>
															<expressionList>
																<expression>
																	<term>
																		<integerConstant> 22 </integerConstant>
																	</term>
																</expression>
																<symbol> , </symbol>
																<expression>
																	<term>
																		<integerConstant> 7 </integerConstant>
																	</term>
																</expression>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> Output </identifier>
															<symbol> . </symbol>
															<identifier> printInt </identifier>
															<symbol> ( </symbol>
															<expressionList>
																<expression>
																	<term>
																		<identifier> player </identifier>
																		<symbol> . </symbol>
																		<identifier> getNumHits </identifier>
																		<symbol> ( </symbol>
																		<expressionList>
																		</expressionList>
																		<symbol> ) </symbol>
																	</term>
																</expression>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> Sys </identifier>
															<symbol> . </symbol>
															<identifier> wait </identifier>
															<symbol> ( </symbol>
															<expressionList>
																<expression>
																	<term>
																		<integerConstant> 250 </integerConstant>
																	</term>
																</expression>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> bat </identifier>
															<symbol> . </symbol>
															<identifier> resetBat </identifier>
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> ball </identifier>
															<symbol> . </symbol>
															<identifier> resetBall </identifier>
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
													</statements>
													<symbol> } </symbol>
													<keyword> else </keyword>
													<symbol> { </symbol>
													<statements>
														<doStatement>
															<keyword> do </keyword>
															<identifier> bat </identifier>
															<symbol> . </symbol>
															<identifier> drawHorizontal </identifier>
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> Output </identifier>
															<symbol> . </symbol>
															<identifier> moveCursor </identifier>
															<symbol> ( </symbol>
															<expressionList>
																<expression>
																	<term>
																		<integerConstant> 5 </integerConstant>
																	</term>
																</expression>
																<symbol> , </symbol>
																<expression>
																	<term>
																		<integerConstant> 7 </integerConstant>
																	</term>
																</expression>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> Output </identifier>
															<symbol> . </symbol>
															<identifier> printString </identifier>
															<symbol> ( </symbol>
															<expressionList>
																<expression>
																	<term>
																		<identifier> end </identifier>
																	</term>
																</expression>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<doStatement>
															<keyword> do </keyword>
															<identifier> bat </identifier>
															<symbol> . </symbol>
															<identifier> drawHorizontal </identifier>
															<symbol> ( </symbol>
															<expressionList>
															</expressionList>
															<symbol> ) </symbol>
															<symbol> ; </symbol>
														</doStatement>
														<letStatement>
															<keyword> let </keyword>
															<identifier> flag </identifier>
															<symbol> = </symbol>
															<expression>
																<term>
																	<keyword> false </keyword>
																</term>
															</expression>
															<symbol> ; </symbol>
														</letStatement>
													</statements>
													<symbol> } </symbol>
												</ifStatement>
											</statements>
											<symbol> } </symbol>
										</ifStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> ball </identifier>
									<symbol> . </symbol>
									<identifier> pitch </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<identifier> i </identifier>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<identifier> vertexLeft </identifier>
											</term>
										</expression>
										<symbol> , </symbol>
										<expression>
											<term>
												<identifier> vertexRight </identifier>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<doStatement>
									<keyword> do </keyword>
									<identifier> Sys </identifier>
									<symbol> . </symbol>
									<identifier> wait </identifier>
									<symbol> ( </symbol>
									<expressionList>
										<expression>
											<term>
												<integerConstant> 17 </integerConstant>
											</term>
										</expression>
									</expressionList>
									<symbol> ) </symbol>
									<symbol> ; </symbol>
								</doStatement>
								<ifStatement>
									<keyword> if </keyword>
									<symbol> ( </symbol>
									<expression>
										<term>
											<identifier> ball </identifier>
											<symbol> . </symbol>
											<identifier> getY </identifier>
											<symbol> ( </symbol>
											<expressionList>
											</expressionList>
											<symbol> ) </symbol>
										</term>
										<symbol> &lt; </symbol>
										<term>
											<integerConstant> 246 </integerConstant>
										</term>
									</expression>
									<symbol> ) </symbol>
									<symbol> { </symbol>
									<statements>
										<doStatement>
											<keyword> do </keyword>
											<identifier> Output </identifier>
											<symbol> . </symbol>
											<identifier> moveCursor </identifier>
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<integerConstant> 5 </integerConstant>
													</term>
												</expression>
												<symbol> , </symbol>
												<expression>
													<term>
														<integerConstant> 7 </integerConstant>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<doStatement>
											<keyword> do </keyword>
											<identifier> Output </identifier>
											<symbol> . </symbol>
											<identifier> printString </identifier>
											<symbol> ( </symbol>
											<expressionList>
												<expression>
													<term>
														<identifier> end </identifier>
													</term>
												</expression>
											</expressionList>
											<symbol> ) </symbol>
											<symbol> ; </symbol>
										</doStatement>
										<letStatement>
											<keyword> let </keyword>
											<identifier> flag </identifier>
											<symbol> = </symbol>
											<expression>
												<term>
													<keyword> false </keyword>
												</term>
											</expression>
											<symbol> ; </symbol>
										</letStatement>
									</statements>
									<symbol> } </symbol>
								</ifStatement>
							</statements>
							<symbol> } </symbol>
						</whileStatement>
					</statements>
					<symbol> } </symbol>
				</whileStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> ball </identifier>
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> bat </identifier>
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> player </identifier>
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<doStatement>
					<keyword> do </keyword>
					<identifier> vertexLeft </identifier>
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					<symbol> ( </symbol>
					<expressionList>
					</expressionList>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</doStatement>
				<returnStatement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</returnStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>