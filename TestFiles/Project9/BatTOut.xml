<tokens>
	<keyword> class </keyword>
	<identifier> Bat </identifier>
	<symbol> { </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> x </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> boolean </keyword>
	<identifier> isHorizontal </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> boolean </keyword>
	<identifier> swungBat </identifier>
	<symbol> ; </symbol>
	<keyword> constructor </keyword>
	<identifier> Bat </identifier>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> _x </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> _y </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> _x </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> _y </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> isHorizontal </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> swungBat </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> this </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> boolean </keyword>
	<identifier> getIsHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> isHorizontal </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> boolean </keyword>
	<identifier> getSwungBat </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> swungBat </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> int </keyword>
	<identifier> getX </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> x </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> int </keyword>
	<identifier> getY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> drawVertical </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> true </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<integerConstant> 6 </integerConstant>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<integerConstant> 24 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> isHorizontal </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> drawHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> true </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<integerConstant> 24 </integerConstant>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<integerConstant> 6 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> isHorizontal </identifier>
	<symbol> = </symbol>
	<keyword> true </keyword>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> eraseVertical </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> false </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<integerConstant> 6 </integerConstant>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<integerConstant> 24 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> eraseHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> false </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawRectangle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<integerConstant> 24 </integerConstant>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<integerConstant> 6 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> resetBat </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> eraseHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> drawVertical </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Memory </identifier>
	<symbol> . </symbol>
	<identifier> dealloc </identifier>
	<symbol> ( </symbol>
	<keyword> this </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>