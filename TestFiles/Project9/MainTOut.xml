<tokens>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
	<keyword> function </keyword>
	<keyword> void </keyword>
	<identifier> main </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<identifier> Player </identifier>
	<identifier> player </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<identifier> Ball </identifier>
	<identifier> ball </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<identifier> Bat </identifier>
	<identifier> bat </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<identifier> Vertex </identifier>
	<identifier> vertexLeft </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<identifier> Vertex </identifier>
	<identifier> vertexRight </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<identifier> String </identifier>
	<identifier> end </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> boolean </keyword>
	<identifier> flag </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> flag </identifier>
	<symbol> = </symbol>
	<keyword> true </keyword>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> end </identifier>
	<symbol> = </symbol>
	<stringConstant> Game Over! </stringConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> player </identifier>
	<symbol> = </symbol>
	<identifier> Player </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> ball </identifier>
	<symbol> = </symbol>
	<identifier> Ball </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 255 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 100 </integerConstant>
	<symbol> , </symbol>
	<keyword> true </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> vertexLeft </identifier>
	<symbol> = </symbol>
	<identifier> Vertex </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 200 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 163 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> vertexRight </identifier>
	<symbol> = </symbol>
	<identifier> Vertex </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 310 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 163 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> bat </identifier>
	<symbol> = </symbol>
	<identifier> Bat </identifier>
	<symbol> . </symbol>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<integerConstant> 240 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 226 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Random </identifier>
	<symbol> . </symbol>
	<identifier> init </identifier>
	<symbol> ( </symbol>
	<integerConstant> 777 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> moveCursor </identifier>
	<symbol> ( </symbol>
	<integerConstant> 22 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 7 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printInt </identifier>
	<symbol> ( </symbol>
	<identifier> player </identifier>
	<symbol> . </symbol>
	<identifier> getNumHits </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> drawVertical </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> flag </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> getStillPitching </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<identifier> Random </identifier>
	<symbol> . </symbol>
	<identifier> nextInt </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> setStillPitching </identifier>
	<symbol> ( </symbol>
	<keyword> true </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> moveCursor </identifier>
	<symbol> ( </symbol>
	<integerConstant> 8 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 7 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printInt </identifier>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> while </keyword>
	<symbol> ( </symbol>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> getStillPitching </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> Keyboard </identifier>
	<symbol> . </symbol>
	<identifier> keyPressed </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> = </symbol>
	<integerConstant> 32 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> setStillPitching </identifier>
	<symbol> ( </symbol>
	<keyword> false </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<symbol> ~ </symbol>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> getIsHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> eraseVertical </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> drawHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> contact </identifier>
	<symbol> ( </symbol>
	<identifier> bat </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> drawHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> player </identifier>
	<symbol> . </symbol>
	<identifier> increaseNumHits </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> moveCursor </identifier>
	<symbol> ( </symbol>
	<integerConstant> 22 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 7 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printInt </identifier>
	<symbol> ( </symbol>
	<identifier> player </identifier>
	<symbol> . </symbol>
	<identifier> getNumHits </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Sys </identifier>
	<symbol> . </symbol>
	<identifier> wait </identifier>
	<symbol> ( </symbol>
	<integerConstant> 250 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> resetBat </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> resetBall </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> drawHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> moveCursor </identifier>
	<symbol> ( </symbol>
	<integerConstant> 5 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 7 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printString </identifier>
	<symbol> ( </symbol>
	<identifier> end </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> drawHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> flag </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> pitch </identifier>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> , </symbol>
	<identifier> vertexLeft </identifier>
	<symbol> , </symbol>
	<identifier> vertexRight </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Sys </identifier>
	<symbol> . </symbol>
	<identifier> wait </identifier>
	<symbol> ( </symbol>
	<integerConstant> 17 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> getY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<integerConstant> 246 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> moveCursor </identifier>
	<symbol> ( </symbol>
	<integerConstant> 5 </integerConstant>
	<symbol> , </symbol>
	<integerConstant> 7 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Output </identifier>
	<symbol> . </symbol>
	<identifier> printString </identifier>
	<symbol> ( </symbol>
	<identifier> end </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> flag </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> ball </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> player </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> vertexLeft </identifier>
	<symbol> . </symbol>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>