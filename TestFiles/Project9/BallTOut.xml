<tokens>
	<keyword> class </keyword>
	<identifier> Ball </identifier>
	<symbol> { </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> x </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> int </keyword>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<keyword> field </keyword>
	<keyword> boolean </keyword>
	<identifier> stillPitching </identifier>
	<symbol> ; </symbol>
	<keyword> constructor </keyword>
	<identifier> Ball </identifier>
	<identifier> new </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> _x </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> _y </identifier>
	<symbol> , </symbol>
	<keyword> boolean </keyword>
	<identifier> _still </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> _x </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> _y </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> stillPitching </identifier>
	<symbol> = </symbol>
	<identifier> _still </identifier>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> this </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> int </keyword>
	<identifier> getY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> y </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> boolean </keyword>
	<identifier> getStillPitching </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> return </keyword>
	<identifier> stillPitching </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> setStillPitching </identifier>
	<symbol> ( </symbol>
	<keyword> boolean </keyword>
	<identifier> sp </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> stillPitching </identifier>
	<symbol> = </symbol>
	<identifier> sp </identifier>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> true </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawCircle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> , </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> setColor </identifier>
	<symbol> ( </symbol>
	<keyword> false </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Screen </identifier>
	<symbol> . </symbol>
	<identifier> drawCircle </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> , </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> pitch </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> i </identifier>
	<symbol> , </symbol>
	<identifier> Vertex </identifier>
	<identifier> left </identifier>
	<symbol> , </symbol>
	<identifier> Vertex </identifier>
	<identifier> right </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 0 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> pitchFast </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> pitchSlow </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> pitchCurveLeft </identifier>
	<symbol> ( </symbol>
	<identifier> left </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> i </identifier>
	<symbol> = </symbol>
	<integerConstant> 3 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> pitchCurveRight </identifier>
	<symbol> ( </symbol>
	<identifier> right </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> pitchFast </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 248 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> stillPitching </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<integerConstant> 5 </integerConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> pitchSlow </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 245 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> stillPitching </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<integerConstant> 2 </integerConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> resetBall </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<integerConstant> 255 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<integerConstant> 100 </integerConstant>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> Sys </identifier>
	<symbol> . </symbol>
	<identifier> wait </identifier>
	<symbol> ( </symbol>
	<integerConstant> 600 </integerConstant>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> do </keyword>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> int </keyword>
	<identifier> distance </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> batX </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> batY </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> xDistance </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> yDistance </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> dist </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> xDistance </identifier>
	<symbol> = </symbol>
	<identifier> Math </identifier>
	<symbol> . </symbol>
	<identifier> multiply </identifier>
	<symbol> ( </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<identifier> batX </identifier>
	<symbol> , </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<identifier> batX </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> yDistance </identifier>
	<symbol> = </symbol>
	<identifier> Math </identifier>
	<symbol> . </symbol>
	<identifier> multiply </identifier>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<identifier> batY </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<identifier> batY </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> dist </identifier>
	<symbol> = </symbol>
	<identifier> Math </identifier>
	<symbol> . </symbol>
	<identifier> sqrt </identifier>
	<symbol> ( </symbol>
	<identifier> xDistance </identifier>
	<symbol> + </symbol>
	<identifier> yDistance </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<identifier> dist </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> boolean </keyword>
	<identifier> contact </identifier>
	<symbol> ( </symbol>
	<identifier> Bat </identifier>
	<identifier> bat </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> getY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> drawHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> distance </identifier>
	<symbol> ( </symbol>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> getX </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> , </symbol>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> getY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> &lt; </symbol>
	<integerConstant> 49 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> bat </identifier>
	<symbol> . </symbol>
	<identifier> drawHorizontal </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> return </keyword>
	<keyword> true </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> pitchCurveLeft </identifier>
	<symbol> ( </symbol>
	<identifier> Vertex </identifier>
	<identifier> vertex </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 247 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> stillPitching </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &lt; </symbol>
	<identifier> vertex </identifier>
	<symbol> . </symbol>
	<identifier> getY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> pitchCurveRight </identifier>
	<symbol> ( </symbol>
	<identifier> Vertex </identifier>
	<identifier> vertex </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &lt; </symbol>
	<integerConstant> 247 </integerConstant>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> stillPitching </identifier>
	<symbol> = </symbol>
	<keyword> false </keyword>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> erase </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> + </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<keyword> if </keyword>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> &lt; </symbol>
	<identifier> vertex </identifier>
	<symbol> . </symbol>
	<identifier> getY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> + </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> else </keyword>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> x </identifier>
	<symbol> = </symbol>
	<identifier> x </identifier>
	<symbol> - </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> do </keyword>
	<identifier> draw </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> int </keyword>
	<identifier> calcXLeft </identifier>
	<symbol> ( </symbol>
	<identifier> Vertex </identifier>
	<identifier> vertex </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> xCoord </identifier>
	<symbol> ; </symbol>
	<keyword> var </keyword>
	<keyword> int </keyword>
	<identifier> yAxis </identifier>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> yAxis </identifier>
	<symbol> = </symbol>
	<identifier> y </identifier>
	<symbol> - </symbol>
	<identifier> vertex </identifier>
	<symbol> . </symbol>
	<identifier> getY </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> xCoord </identifier>
	<symbol> = </symbol>
	<identifier> Math </identifier>
	<symbol> . </symbol>
	<identifier> multiply </identifier>
	<symbol> ( </symbol>
	<identifier> yAxis </identifier>
	<symbol> , </symbol>
	<identifier> yAxis </identifier>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<identifier> vertex </identifier>
	<symbol> . </symbol>
	<identifier> getX </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<identifier> xCoord </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> method </keyword>
	<keyword> void </keyword>
	<identifier> dispose </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> do </keyword>
	<identifier> Memory </identifier>
	<symbol> . </symbol>
	<identifier> dealloc </identifier>
	<symbol> ( </symbol>
	<keyword> this </keyword>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>