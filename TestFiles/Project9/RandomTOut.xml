<tokens>
	<keyword> class </keyword>
	<identifier> Random </identifier>
	<symbol> { </symbol>
	<keyword> static </keyword>
	<keyword> int </keyword>
	<identifier> previous </identifier>
	<symbol> ; </symbol>
	<keyword> static </keyword>
	<keyword> int </keyword>
	<identifier> a </identifier>
	<symbol> ; </symbol>
	<keyword> static </keyword>
	<keyword> int </keyword>
	<identifier> b </identifier>
	<symbol> ; </symbol>
	<keyword> static </keyword>
	<keyword> int </keyword>
	<identifier> m </identifier>
	<symbol> ; </symbol>
	<keyword> function </keyword>
	<keyword> void </keyword>
	<identifier> init </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> seed </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> = </symbol>
	<integerConstant> 100 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> b </identifier>
	<symbol> = </symbol>
	<integerConstant> 2345s </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> m </identifier>
	<symbol> = </symbol>
	<integerConstant> 4 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> previous </identifier>
	<symbol> = </symbol>
	<identifier> Random </identifier>
	<symbol> . </symbol>
	<identifier> mod </identifier>
	<symbol> ( </symbol>
	<identifier> seed </identifier>
	<symbol> , </symbol>
	<identifier> m </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> mod </identifier>
	<symbol> ( </symbol>
	<keyword> int </keyword>
	<identifier> a </identifier>
	<symbol> , </symbol>
	<keyword> int </keyword>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> = </symbol>
	<identifier> Math </identifier>
	<symbol> . </symbol>
	<identifier> abs </identifier>
	<symbol> ( </symbol>
	<identifier> a </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> y </identifier>
	<symbol> = </symbol>
	<identifier> Math </identifier>
	<symbol> . </symbol>
	<identifier> abs </identifier>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<identifier> a </identifier>
	<symbol> - </symbol>
	<symbol> ( </symbol>
	<identifier> y </identifier>
	<symbol> * </symbol>
	<identifier> Math </identifier>
	<symbol> . </symbol>
	<identifier> divide </identifier>
	<symbol> ( </symbol>
	<identifier> a </identifier>
	<symbol> , </symbol>
	<identifier> y </identifier>
	<symbol> ) </symbol>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<keyword> function </keyword>
	<keyword> int </keyword>
	<identifier> nextInt </identifier>
	<symbol> ( </symbol>
	<symbol> ) </symbol>
	<symbol> { </symbol>
	<keyword> let </keyword>
	<identifier> previous </identifier>
	<symbol> = </symbol>
	<identifier> Random </identifier>
	<symbol> . </symbol>
	<identifier> mod </identifier>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> previous </identifier>
	<symbol> * </symbol>
	<identifier> a </identifier>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<identifier> b </identifier>
	<symbol> , </symbol>
	<identifier> m </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> a </identifier>
	<symbol> = </symbol>
	<identifier> previous </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> previous </identifier>
	<symbol> = </symbol>
	<identifier> Random </identifier>
	<symbol> . </symbol>
	<identifier> mod </identifier>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> previous </identifier>
	<symbol> * </symbol>
	<identifier> a </identifier>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<identifier> b </identifier>
	<symbol> , </symbol>
	<identifier> m </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> b </identifier>
	<symbol> = </symbol>
	<symbol> ( </symbol>
	<identifier> previous </identifier>
	<symbol> + </symbol>
	<integerConstant> 1 </integerConstant>
	<symbol> ) </symbol>
	<symbol> * </symbol>
	<integerConstant> 3 </integerConstant>
	<symbol> ; </symbol>
	<keyword> let </keyword>
	<identifier> previous </identifier>
	<symbol> = </symbol>
	<identifier> Random </identifier>
	<symbol> . </symbol>
	<identifier> mod </identifier>
	<symbol> ( </symbol>
	<symbol> ( </symbol>
	<identifier> previous </identifier>
	<symbol> * </symbol>
	<identifier> a </identifier>
	<symbol> ) </symbol>
	<symbol> + </symbol>
	<identifier> b </identifier>
	<symbol> , </symbol>
	<identifier> m </identifier>
	<symbol> ) </symbol>
	<symbol> ; </symbol>
	<keyword> return </keyword>
	<identifier> previous </identifier>
	<symbol> ; </symbol>
	<symbol> } </symbol>
	<symbol> } </symbol>
</tokens>