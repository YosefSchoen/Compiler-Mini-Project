<class>
	<keyword> class </keyword>
	<identifier> foo </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> static </keyword>
		<keyword> int </keyword>
		<identifier> b </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> x </identifier>
		<symbol> , </symbol>
		<identifier> y </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> static </keyword>
		<keyword> int </keyword>
		<identifier> z </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> char </keyword>
		<identifier> a </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> int </keyword>
		<identifier> bank </identifier>
		<symbol> ( </symbol>
		<parameterList>
			<keyword> int </keyword>
			<identifier> x2 </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> y2 </identifier>
			<symbol> , </symbol>
			<keyword> int </keyword>
			<identifier> z2 </identifier>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> xyz </identifier>
				<symbol> , </symbol>
				<identifier> xyz2 </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> char </keyword>
				<identifier> abc </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> xyz </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> x2 </identifier>
						</term>
						<symbol> + </symbol>
						<term>
							<symbol> ( </symbol>
							<expression>
								<term>
									<identifier> y2 </identifier>
								</term>
								<symbol> * </symbol>
								<term>
									<identifier> z2 </identifier>
								</term>
							</expression>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>